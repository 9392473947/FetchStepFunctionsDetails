name: Deploy FastAPI

on: 
  push:
    branches:
      - main
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      KOPS_STATE_BUCKET: kopsbkt100
      CLUSTER_NAME: kopscluster.k8s.local
      NODE_COUNT: 2
      NODE_SIZE: t3.small
      CONTROL_PLANE_SIZE: t3.medium  # âœ… Updated from MASTER_SIZE      ZONES: ap-south-1a
   #checkout the repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

    #install awscli
      - name: Install AWS CLI
        run: |
          aws --version

        
      #set up aws cli 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      #login to aws ecr public
      - name: Login to AWS ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/e2v8h6j1

     #building docker image
      - name: Build Docker image
        run: |
          docker build -t fast-api .

          #tag docker image
      - name: Tag Docker image
        run: |
          docker tag fast-api:latest public.ecr.aws/e2v8h6j1/githubaction:latest

      #push docker image to aws ecr pulic
      - name: Push Docker image to AWS ECR Public
        run: |
          docker push public.ecr.aws/e2v8h6j1/githubaction:latest

      #install kops & start cluster
      - name: Install kops
        run: |
          curl -LO https://github.com/kubernetes/kops/releases/latest/download/kops-linux-amd64
          chmod +x kops-linux-amd64
          sudo mv kops-linux-amd64 /usr/local/bin/kops
          kops version

      #use existing s3 bucket for kops state
      - name: Use existing s3 bucket for kops state
        run: echo "KOPS_STATE_STORE=s3://${{ env.KOPS_STATE_BUCKET }}" >> $GITHUB_ENV

      - name: Create or Update Kubernetes Cluster
        run: |
          export KOPS_STATE_STORE=s3://${{ env.KOPS_STATE_BUCKET }}

          if kops get cluster ${{ env.CLUSTER_NAME }} --state=${KOPS_STATE_STORE} > /dev/null 2>&1; then
            echo "Cluster already exists, updating..."
            kops update cluster ${{ env.CLUSTER_NAME }} --state=${KOPS_STATE_STORE} --yes
          else
            echo "Creating a new cluster..."
            kops create cluster \
              --name=${{ env.CLUSTER_NAME }} \
              --state=${KOPS_STATE_STORE} \
              --cloud=aws \    
              --zones=${{ env.ZONES }} \
              --node-count=${{ env.NODE_COUNT }} \
              --node-size=${{ env.NODE_SIZE }} \    
              --control-plane-size=${{ env.CONTROL_PLANE_SIZE }} \
              --dns-zone=${{ env.CLUSTER_NAME }}
          kops update cluster ${{ env.CLUSTER_NAME }} --state=${KOPS_STATE_STORE} --yes
          fi


      #validate cluster
      - name: validate cluster
        run: |
          kops validate cluster --state=${{ env.KOPS_STATE_STORE }}
          

        #install kubectl
      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl for Kops Cluster
        run: |
          kops export kubecfg --name=${{ env.CLUSTER_NAME }} --state=${{ env.KOPS_STATE_STORE }}

      #Apply kubernates deployement
      - name: Deploy FastAPI App to kops
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get svc -o wide
          
          
